# -*- coding: utf-8 -*-
"""DES Encryption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10u5DepWaceuqd0_65OBQjw3dCA4T5DN0
"""

'''
Title: Python Implementation of DES Encryption Algorithm

Description:
This script implements the Data Encryption Standard (DES) algorithm for encryption and decryption. DES is a symmetric key algorithm that uses a 56-bit key to encrypt and decrypt data in 64-bit blocks. The algorithm involves several steps including initial and final permutations, key generation, and multiple rounds of substitution and permutation.

Author: Antonio Karam

Date: February 27, 2024

Usage:
Ensure that Python is installed on your system. Run the script and provide the ciphertext and key as input when prompted. The script will output the encrypted or decrypted result in binary, hexadecimal, and ASCII formats.
'''

import sys


# Matricies
PC1 = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]

PC2 = [14, 17, 11, 24, 1, 5,
        3, 28, 15, 6, 21, 10,
        23, 19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32]

IP = [58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7]

IP_1 = [40, 8, 48, 16, 56, 24, 64, 32,
          39, 7, 47, 15, 55, 23, 63, 31,
          38, 6, 46, 14, 54, 22, 62, 30,
          37, 5, 45, 13, 53, 21, 61, 29,
          36, 4, 44, 12, 52, 20, 60, 28,
          35, 3, 43, 11, 51, 19, 59, 27,
          34, 2, 42, 10, 50, 18, 58, 26,
          33, 1, 41, 9, 49, 17, 57, 25]

EBIT = [32, 1, 2, 3, 4, 5, 4, 5,
         6, 7, 8, 9, 8, 9, 10, 11,
         12, 13, 12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21, 20, 21,
         22, 23, 24, 25, 24, 25, 26, 27,
         28, 29, 28, 29, 30, 31, 32, 1]

SBOX = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
         [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
         [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
         [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],

        [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
         [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
         [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
         [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],

        [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
         [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
         [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
         [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],

        [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
         [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
         [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
         [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],

        [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
         [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
         [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
         [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],

        [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
         [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
         [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
         [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],

        [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
         [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
         [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
         [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],

        [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
         [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
         [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
         [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

P = [16,  7, 20, 21,
      29, 12, 28, 17,
      1, 15, 23, 26,
      5, 18, 31, 10,
      2,  8, 24, 14,
      32, 27,  3,  9,
      19, 13, 30,  6,
      22, 11,  4, 25]

SHIFTS = [1, 1, 2, 2,
          2, 2, 2, 2,
          1, 2, 2, 2,
          2, 2, 2, 1]

# Function to rearrange the bits
def permute(k, arr, n):
    permutation = ""

    for i in range(0, n):
        permutation = permutation + k[arr[i] - 1]

    return permutation

# Function for circular left shift
def left_shift(bits):
  return bits[1:] + bits[:1]

# Function to XOR bits
def xor(a, b):
    ans = ""
    for i in range(len(a)):
        if a[i] == b[i]:
            ans = ans + "0"
        else:
            ans = ans + "1"
    return ans

# Function to get decimal
def to_decimal(binary):
    decimal, i, n = 0, 0, 0
    while(binary != 0):
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

# Function to binary
def to_binary(num):
    res = bin(num).replace("0b", "")
    if(len(res) % 4 != 0):
        div = len(res) / 4
        div = int(div)
        counter = (4 * (div + 1)) - len(res)
        for i in range(0, counter):
            res = '0' + res
    return res

# Function to generate 16 keys
def get_keys(key):

  # Get K+
  k_plus = permute(key, PC1, 56)
  c, d = k_plus[0:28], k_plus[28:56]

  key_list = []

  # 1 <= n < 16
  for i in range(0, 16):

    # Shifting the bits by nth shifts by checking from shift table
    for j in range(SHIFTS[i]):
      c = left_shift(c)
      d = left_shift(d)

    # Concatenate the pairs
    conc = c + d

    # Apply pc2 permuation
    round_key = permute(conc, PC2, 48)

    key_list.append(round_key)

  return key_list


def encrypt(message, keys):

  # Apply Initial Permutation
  ip = permute(message, IP, 64)

  # Split into left and right
  left, right = ip[:32], ip[32:]

  # 1 <= n < 16
  for i in range(0, 16):

    # Apply f by first expanding R
    right_e = permute(right, EBIT, 48)

    # XOR key and R
    f1 = xor(right_e, keys[i])

    # S calculations
    sbx = ""
    for j in range(0, 8):
      row = to_decimal(int(f1[j * 6] + f1[j * 6 + 5]))
      col = to_decimal(int(f1[j * 6 + 1] + f1[j * 6 + 2] + f1[j * 6 + 3] + f1[j * 6 + 4]))

      val = SBOX[j][row][col]
      sbx += to_binary(val)

    # Apply P permutation
    f = permute(sbx, P, 32)

    # Display f for the iteration
    print(f'Iteration {i+1}: f = {f}')

    # Finalize calculation
    result = xor(left, f)
    left = result

    print(f'L{i+1}: {left}\t R{i+1}: {right}')

    # Reverse
    if(i != 15):
      left, right = right, left

  # Combination
  comb = left + right

  # Final permutation
  cipher = permute(comb, IP_1, 64)

  return cipher


def __main__():
  # Cipher and Key
  CIPHER      = input('Ciphertext (binary): ').strip()
  KEY         = input('Key (binary): ').strip()
  choice      = input('Encryption (E) or Decryption (D): ')

  while choice != 'E' and choice != 'D':
    choice    = input('Encryption (E) or Decryption (D): ')

  print()

  # Main Execution
  print(f'CYPHERTEXT: {CIPHER}')
  print(f'KEY: {KEY}')
  print()

  print("KEY GENERATION:")
  keys = get_keys(KEY)

  if choice == 'D':
    keys = keys[::-1]

  for i,key in enumerate(keys):
    print(f'KEY {i+1}: {key}')
  print()

  print("ENCRYPTION/DECRYPTION: f values")
  res = encrypt(CIPHER, keys)
  print()

  print(f'BINARY RESULT: {res}')
  print(f'HEX RESULT: {hex(int(res, 2))}')
  print(f'ASCII RESULT: {bytearray.fromhex(hex(int(res, 2))[2:]).decode()}')


__main__()